Minimization example:

1) Delete unreachable states (from the initial state)
2) Build state transition table. For example, with Sigma = {a, b} and Q = {0, 1, 2, 3, 4}:
  a  b
0 1  2
1 1  3
2 1  2
3 1  4
4 1  2

Mark initial state and final state (and it's appearances):

     a  b
-> 0 1  2
   1 1  3
   2 1  2
   3 1 *4
  *4 1  2

We'll try to find all the 0-equivalent states, separating final states from non-final states:

NF = {0, 1, 2, 3}, F = {4}

Now we'll find the 1-equivalent. We grab the non-final states from the 0-equivalent states and we have to see if they're 1-equivalent or not.

Starting with 0 and 1. We check where they go with a and b.

0 a 1 - 0 b 2
1 a 1 - 1 b 3

We then check if the destination states of each source state through the same transition were in the same group in the previous equivalence. In this case, 1 is in the same group as 1 (trivial), and 2 is in the same group as 3 (easy to see, also, because there is only one non-final states group in the 0-equivalence).

Therefore, as 0 and 1 go to the same destination group respectively, then, they're also 1-equivalent. The temporary states set are:

{0, 1, ...} {4}

Now we have to see if 2 is equivalent with anyone of them (that we already know are equivalent). We pick any of them, in this case, 0.

0 a 1 - 0 b 2
2 a 1 - 2 b 2

They fall in the same destination state, so they're also 1-equivalent. We can add 2 to the same temporary states set.

{0, 1, 2, ...} {4}

Again, we check if 3 is 1-equivalent to any of the previous ones. Let's say, 2.

2 a 1 - 2 b 2
3 a 1 - 3 b 4 <== different group! 2 is in the non-final states and 4 is in the final states

Therefore, 3 is not 1-equivalent with any of the others. The final 1-equivalent sets are:

{0, 1, 2} {3} {4}

We now check for the 2-equivalence in the states. 3 and for can no longer be combined, so we check for the equivalence in 0, 1 and 2. Let's start with 0 and 1.

0 a 1 - 0 b 2
1 a 1 - 1 b 3

Through a there's no problem since both 0 and 1 go to 1, but through b, 0 goes to 2 and 1 goes to 3, which are in a different set when you look at the previous equivalence (1-equivalence). Therefore, they go to different 2-equivalent states. The temporary sets are:

{0}{1}

Then, we check 0 and 2.

0 a 1 - 0 b 2
2 a 1 - 2 b 2

As they go to the same destination states in both cases, they are 2-equivalent. The final sets, since we can't join the other ones, are:

{0, 2}{1}{3}{4}

Now we check for 3-equivalence between 0 and 2:

0 a 1 - 0 b 2
2 a 1 - 2 b 2

Since they did not change again, for any k equal or greater than 3, the final k-equivalence sets are:

{0, 2}{1}{3}{4}

Then, we can join states 0 and 2 in our original automata to minimize it. We reconstruct the DFA the following way:

{0, 2} a {1}    (because they both go to 1 through a in the original automata)
{0, 2} b {0, 2} (idem)
{1}    a {1}
{1}    b {3}
{3}    a {1}
{3}    b {4}
{4}    a {1}
{4}    b {0, 2}